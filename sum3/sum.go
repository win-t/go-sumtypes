// Code generated by "go-sumtypes/generate.go". DO NOT EDIT.

package sum3

type Type[T0, T1, T2 any] struct {
	v any
}

func (s *Type[T0, T1, T2]) Set0(v T0) {
	s.v = v
}

func (*Type[T0, T1, T2]) New0(v T0) Type[T0, T1, T2] {
	return Type[T0, T1, T2]{v}
}

func (s *Type[T0, T1, T2]) As0() (T0, bool) {
	v, ok := s.v.(T0)
	return v, ok
}

func (s *Type[T0, T1, T2]) Set1(v T1) {
	s.v = v
}

func (*Type[T0, T1, T2]) New1(v T1) Type[T0, T1, T2] {
	return Type[T0, T1, T2]{v}
}

func (s *Type[T0, T1, T2]) As1() (T1, bool) {
	v, ok := s.v.(T1)
	return v, ok
}

func (s *Type[T0, T1, T2]) Set2(v T2) {
	s.v = v
}

func (*Type[T0, T1, T2]) New2(v T2) Type[T0, T1, T2] {
	return Type[T0, T1, T2]{v}
}

func (s *Type[T0, T1, T2]) As2() (T2, bool) {
	v, ok := s.v.(T2)
	return v, ok
}

func (s *Type[T0, T1, T2]) Underlying() any {
	return s.v
}

func (s Type[T0, T1, T2]) Case(f0 func(T0), f1 func(T1), f2 func(T2)) {
	switch v := s.v.(type) {
	case T0:
		f0(v)
	case T1:
		f1(v)
	case T2:
		f2(v)
	default:
		panic("called Case on an invalid value")
	}
}
