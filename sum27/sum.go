// Code generated by "go-sumtypes/generate.go". DO NOT EDIT.

package sum27

import "reflect"

type Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26 any] struct {
	v any
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set0(v T0) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get0() (T0, bool) {
	v, ok := s.v.(T0)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set1(v T1) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get1() (T1, bool) {
	v, ok := s.v.(T1)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set2(v T2) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get2() (T2, bool) {
	v, ok := s.v.(T2)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set3(v T3) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get3() (T3, bool) {
	v, ok := s.v.(T3)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set4(v T4) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get4() (T4, bool) {
	v, ok := s.v.(T4)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set5(v T5) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get5() (T5, bool) {
	v, ok := s.v.(T5)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set6(v T6) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get6() (T6, bool) {
	v, ok := s.v.(T6)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set7(v T7) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get7() (T7, bool) {
	v, ok := s.v.(T7)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set8(v T8) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get8() (T8, bool) {
	v, ok := s.v.(T8)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set9(v T9) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get9() (T9, bool) {
	v, ok := s.v.(T9)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set10(v T10) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get10() (T10, bool) {
	v, ok := s.v.(T10)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set11(v T11) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get11() (T11, bool) {
	v, ok := s.v.(T11)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set12(v T12) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get12() (T12, bool) {
	v, ok := s.v.(T12)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set13(v T13) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get13() (T13, bool) {
	v, ok := s.v.(T13)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set14(v T14) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get14() (T14, bool) {
	v, ok := s.v.(T14)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set15(v T15) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get15() (T15, bool) {
	v, ok := s.v.(T15)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set16(v T16) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get16() (T16, bool) {
	v, ok := s.v.(T16)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set17(v T17) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get17() (T17, bool) {
	v, ok := s.v.(T17)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set18(v T18) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get18() (T18, bool) {
	v, ok := s.v.(T18)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set19(v T19) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get19() (T19, bool) {
	v, ok := s.v.(T19)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set20(v T20) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get20() (T20, bool) {
	v, ok := s.v.(T20)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set21(v T21) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get21() (T21, bool) {
	v, ok := s.v.(T21)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set22(v T22) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get22() (T22, bool) {
	v, ok := s.v.(T22)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set23(v T23) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get23() (T23, bool) {
	v, ok := s.v.(T23)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set24(v T24) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get24() (T24, bool) {
	v, ok := s.v.(T24)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set25(v T25) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get25() (T25, bool) {
	v, ok := s.v.(T25)
	return v, ok
}

func (s *Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Set26(v T26) {
	s.v = v
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Get26() (T26, bool) {
	v, ok := s.v.(T26)
	return v, ok
}

func (s Type[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26]) Case(f0 func(T0), f1 func(T1), f2 func(T2), f3 func(T3), f4 func(T4), f5 func(T5), f6 func(T6), f7 func(T7), f8 func(T8), f9 func(T9), f10 func(T10), f11 func(T11), f12 func(T12), f13 func(T13), f14 func(T14), f15 func(T15), f16 func(T16), f17 func(T17), f18 func(T18), f19 func(T19), f20 func(T20), f21 func(T21), f22 func(T22), f23 func(T23), f24 func(T24), f25 func(T25), f26 func(T26)) {
	switch v := s.v.(type) {
	case T0:
		if f0 == nil {
			noHandler(v)
		}
		f0(v)
	case T1:
		if f1 == nil {
			noHandler(v)
		}
		f1(v)
	case T2:
		if f2 == nil {
			noHandler(v)
		}
		f2(v)
	case T3:
		if f3 == nil {
			noHandler(v)
		}
		f3(v)
	case T4:
		if f4 == nil {
			noHandler(v)
		}
		f4(v)
	case T5:
		if f5 == nil {
			noHandler(v)
		}
		f5(v)
	case T6:
		if f6 == nil {
			noHandler(v)
		}
		f6(v)
	case T7:
		if f7 == nil {
			noHandler(v)
		}
		f7(v)
	case T8:
		if f8 == nil {
			noHandler(v)
		}
		f8(v)
	case T9:
		if f9 == nil {
			noHandler(v)
		}
		f9(v)
	case T10:
		if f10 == nil {
			noHandler(v)
		}
		f10(v)
	case T11:
		if f11 == nil {
			noHandler(v)
		}
		f11(v)
	case T12:
		if f12 == nil {
			noHandler(v)
		}
		f12(v)
	case T13:
		if f13 == nil {
			noHandler(v)
		}
		f13(v)
	case T14:
		if f14 == nil {
			noHandler(v)
		}
		f14(v)
	case T15:
		if f15 == nil {
			noHandler(v)
		}
		f15(v)
	case T16:
		if f16 == nil {
			noHandler(v)
		}
		f16(v)
	case T17:
		if f17 == nil {
			noHandler(v)
		}
		f17(v)
	case T18:
		if f18 == nil {
			noHandler(v)
		}
		f18(v)
	case T19:
		if f19 == nil {
			noHandler(v)
		}
		f19(v)
	case T20:
		if f20 == nil {
			noHandler(v)
		}
		f20(v)
	case T21:
		if f21 == nil {
			noHandler(v)
		}
		f21(v)
	case T22:
		if f22 == nil {
			noHandler(v)
		}
		f22(v)
	case T23:
		if f23 == nil {
			noHandler(v)
		}
		f23(v)
	case T24:
		if f24 == nil {
			noHandler(v)
		}
		f24(v)
	case T25:
		if f25 == nil {
			noHandler(v)
		}
		f25(v)
	case T26:
		if f26 == nil {
			noHandler(v)
		}
		f26(v)
	default:
		panic("called Case on an invalid value")
	}
}

func noHandler(v any) {
	panic("no handler for case " + reflect.TypeOf(v).String())
}
